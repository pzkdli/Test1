#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Manager Bot ‚Äî 1 file
- Admin ch√≠nh: MAIN_ADMIN_ID
- Bot qu·∫£n l√Ω: BOT_TOKEN
T√≠nh nƒÉng:
  * Th√™m admin ph·ª• theo NG√ÄY (0 = vƒ©nh vi·ªÖn), set quota (s·ªë bot t·ªëi ƒëa)
  * Sub-admin: t·∫°o bot m·ªõi -> sinh folder ch·ª©a welcome_bot_single.py + join.py + config.json
  * T·ª± ch·∫°y 2 ti·∫øn tr√¨nh con & auto-restart; stop n·∫øu sub-admin h·∫øt h·∫°n
  * Kh·ªüi ƒë·ªông -> bootstrap l·∫°i bot con c√≤n h·∫°n
  * Panel b√°n: b·∫≠t/t·∫Øt b√°n + s·ª≠a n·ªôi dung; ng∆∞·ªùi l·∫° nh·∫•n BUY s·∫Ω nh·∫≠n n·ªôi dung admin ƒë·∫∑t
  * /id (in nghi√™ng), /vps (CPU/RAM/Disk), /huongdan
"""

import os, sys, json, time, shutil, subprocess, importlib.util, signal, threading
from typing import Dict, Optional, List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ======================== C·∫§U H√åNH ========================
BOT_TOKEN = "8442522633:AAE9joOXoptFCyep67H9OWvXIODvF5I3b9Q"   # bot qu·∫£n l√Ω
MAIN_ADMIN_ID = 7550813603                                      # admin ch√≠nh

APP_DIR   = os.path.dirname(os.path.abspath(__file__))
DATA_DIR  = os.path.join(APP_DIR, "manager_data")
BOTS_DIR  = os.path.join(APP_DIR, "bots")
STATE_FP  = os.path.join(DATA_DIR, "manager_state.json")
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(BOTS_DIR, exist_ok=True)

DEFAULT_STATE = {
    "sub_admins": {},   # "uid_str": {"expires_at": epoch|0, "quota": 1}
    "bots": [],         # {"id": "uid_ts", "owner_id": int, "folder": str, "token_masked": str, "created_at": ts}
    "sale": {"enabled": False, "text": "Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ mua key/bot."},
    "non_admin_reply": "Xin ch√†o! ƒê√¢y l√† bot qu·∫£n l√Ω. Nh·∫•n n√∫t b√™n d∆∞·ªõi n·∫øu b·∫°n mu·ªën mua key/bot."
}

# ======================== TEMPLATE BOT CON ========================
WELCOME_BOT_TEMPLATE = r'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sub Bot ‚Äî welcome + panel + throttle + auto-delete + notify owner + /id
"""
import os, json, time, asyncio
from typing import Dict
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, User
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

BOT_TOKEN = "__BOT_TOKEN__"
ADMIN_ID  = __ADMIN_ID__

APP_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_PATH = os.path.join(APP_DIR, "config.json")
STATE_PATH  = os.path.join(APP_DIR, "state.json")

DEFAULT_CONFIG = {
    "bot_token": "__BOT_TOKEN__",
    "admin_id": __ADMIN_ID__,
    "enabled": True,
    "delete_after_seconds": 0.1,
    "tag_enabled": True,
    "cooldown_seconds": 10.0,
    "dm_notify_enabled": True,
    "start_reply": "üëã Xin ch√†o!",
    "welcome": {"text": "Xin ch√†o {tag} üëã\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <b>{chat_title}</b>!", "photo_path": ""}
}
pending_action: Dict[int, str] = {}
last_sent_at: Dict[int, float] = {}
chat_locks: Dict[int, asyncio.Lock] = {}

def ensure_files():
    if not os.path.exists(CONFIG_PATH):
        save_config(DEFAULT_CONFIG)
    if not os.path.exists(STATE_PATH):
        save_state({"welcome_messages": {}, "stats": {"total_messages_sent": 0}})

def load_config() -> dict:
    ensure_files()
    with open(CONFIG_PATH, "r", encoding="utf-8") as f:
        return json.load(f)
def save_config(cfg: dict):
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(cfg, f, ensure_ascii=False, indent=2)
def load_state() -> dict:
    ensure_files()
    with open(STATE_PATH, "r", encoding="utf-8") as f:
        return json.load(f)
def save_state(st: dict):
    with open(STATE_PATH, "w", encoding="utf-8") as f:
        json.dump(st, f, ensure_ascii=False, indent=2)

async def notify_owner(context: ContextTypes.DEFAULT_TYPE, text_html: str):
    try:
        await context.bot.send_message(chat_id=ADMIN_ID, text=text_html, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception:
        pass

def mention(u: 'User') -> str:
    name = (getattr(u, "full_name", None) or u.first_name or "b·∫°n")
    return f'<a href="tg://user?id={u.id}">{name}</a>'

def tag_or_name(u: 'User', on: bool) -> str:
    return mention(u) if on else (u.first_name or "b·∫°n")

def fmt_text(tpl: str, chat_title: str, u: 'User', tag_on: bool) -> str:
    return (tpl
        .replace("{first_name}", u.first_name or "")
        .replace("{last_name}", u.last_name or "")
        .replace("{mention}", mention(u))
        .replace("{tag}", tag_or_name(u, tag_on))
        .replace("{chat_title}", chat_title or ""))

def lock_for_chat(cid: int) -> asyncio.Lock:
    if cid not in chat_locks:
        chat_locks[cid] = asyncio.Lock()
    return chat_locks[cid]

async def purge_old(chat_id: int, ctx: ContextTypes.DEFAULT_TYPE):
    st = load_state()
    mids = st.get("welcome_messages", {}).get(str(chat_id), [])
    if not mids: return
    keep = []
    for mid in mids:
        try: await ctx.bot.delete_message(chat_id=chat_id, message_id=mid)
        except Exception: keep.append(mid)
    st["welcome_messages"][str(chat_id)] = keep[-10:] if keep else []
    save_state(st)

async def track_msg(chat_id: int, mid: int):
    st = load_state()
    arr = st.get("welcome_messages", {}).get(str(chat_id), [])
    arr.append(mid)
    st.setdefault("welcome_messages", {})[str(chat_id)] = arr[-20:]
    st.setdefault("stats", {}).setdefault("total_messages_sent", 0)
    st["stats"]["total_messages_sent"] += 1
    save_state(st)

def allowed_now(chat_id: int, cooldown: float) -> bool:
    now = time.monotonic()
    last = last_sent_at.get(chat_id, 0.0)
    if now - last >= cooldown:
        last_sent_at[chat_id] = now
        return True
    return False

async def send_and_autodel(chat_id: int, chat_title: str, user: 'User', ctx: ContextTypes.DEFAULT_TYPE):
    cfg = load_config()
    if not cfg.get("enabled", True): return
    tpl       = cfg["welcome"]["text"]
    photo     = cfg["welcome"]["photo_path"].strip()
    delay     = float(cfg["delete_after_seconds"])
    tag_on    = bool(cfg["tag_enabled"])

    await purge_old(chat_id, ctx)
    text = fmt_text(tpl, chat_title, user, tag_on)

    try:
        if photo:
            if photo.startswith("http"):
                msg = await ctx.bot.send_photo(chat_id=chat_id, photo=photo, caption=text, parse_mode=ParseMode.HTML)
            else:
                with open(photo, "rb") as f:
                    msg = await ctx.bot.send_photo(chat_id=chat_id, photo=f, caption=text, parse_mode=ParseMode.HTML)
        else:
            msg = await ctx.bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
    except Exception as e:
        await notify_owner(ctx, f"‚ö†Ô∏è L·ªói g·ª≠i ch√†o ·ªü <b>{chat_title}</b>: <code>{e}</code>")
        return

    await track_msg(chat_id, msg.message_id)
    await notify_owner(ctx, f"üÜï V·ª´a ch√†o {mention(user)} t·∫°i nh√≥m <b>{chat_title or chat_id}</b>.")

    async def _del():
        try:
            await asyncio.sleep(delay)
            await ctx.bot.delete_message(chat_id=chat_id, message_id=msg.message_id)
        except Exception:
            pass
    asyncio.create_task(_del())

async def on_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.new_chat_members: return
    chat   = update.effective_chat
    title  = (chat.title or chat.full_name or "")
    cid    = chat.id
    latest = update.message.new_chat_members[-1]
    cfg    = load_config()
    cooldown = float(cfg["cooldown_seconds"])
    async with lock_for_chat(cid):
        if not allowed_now(cid, cooldown): return
        await send_and_autodel(cid, title, latest, context)

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    u = update.effective_user
    if u and u.id == ADMIN_ID:
        await update.message.reply_text("‚úÖ Bot con OK. G√µ /panel ƒë·ªÉ m·ªü qu·∫£n tr·ªã.")
        return
    reply = load_config().get("start_reply", "üëã Xin ch√†o!")
    try:
        await update.message.reply_text(reply)
    finally:
        await notify_owner(context, f"üîî C√≥ ng∆∞·ªùi: {mention(u)} ƒë√£ nh·∫Øn v·ªõi bot (private).")

async def on_private_non_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    if update.effective_user and update.effective_user.id == ADMIN_ID: return
    await notify_owner(context, f"üîî C√≥ ng∆∞·ªùi: {mention(update.effective_user)} ƒë√£ nh·∫Øn v·ªõi bot (private).")

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    target = update.message.reply_to_message.from_user if update.message.reply_to_message and update.message.reply_to_message.from_user else update.effective_user
    uid = target.id
    name = getattr(target, "full_name", None) or target.first_name or "ng∆∞·ªùi d√πng"
    await update.message.reply_text(f"üÜî ID c·ªßa {name}: <i>{uid}</i>", parse_mode=ParseMode.HTML)

def panel(cfg: dict) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("üü¢ B·∫¨T" if cfg.get("enabled", True) else "üî¥ T·∫ÆT", callback_data="TOGGLE_ENABLED"),
         InlineKeyboardButton(f"‚è± Del: {cfg.get('delete_after_seconds',0.1)}s", callback_data="SET_DELAY")],
        [InlineKeyboardButton("üè∑ TAG: ON" if cfg.get("tag_enabled", True) else "üè∑ TAG: OFF", callback_data="TOGGLE_TAG"),
         InlineKeyboardButton(f"üõë Cooldown: {cfg.get('cooldown_seconds',10.0)}s", callback_data="SET_COOLDOWN")],
        [InlineKeyboardButton("üó®Ô∏è Reply(/start)", callback_data="SET_REPLYTEXT"),
         InlineKeyboardButton("üñº ·∫¢nh ch√†o", callback_data="SET_PHOTO")],
        [InlineKeyboardButton("üìù N·ªôi dung ch√†o", callback_data="SET_TEXT"),
         InlineKeyboardButton("üëÅ C·∫•u h√¨nh", callback_data="SHOW_CFG")],
    ]
    return InlineKeyboardMarkup(rows)

async def cmd_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: return
    await update.message.reply_text("‚öôÔ∏è Panel:", reply_markup=panel(load_config()))

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: return
    q = update.callback_query; await q.answer()
    cfg = load_config(); d = q.data
    if d == "TOGGLE_ENABLED":
        cfg["enabled"] = not cfg.get("enabled", True); save_config(cfg)
        try: await q.message.edit_text("‚öôÔ∏è Panel:", reply_markup=panel(cfg))
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="‚öôÔ∏è Panel:", reply_markup=panel(cfg))
    elif d == "TOGGLE_TAG":
        cfg["tag_enabled"] = not cfg.get("tag_enabled", True); save_config(cfg)
        try: await q.message.edit_text("‚öôÔ∏è Panel:", reply_markup=panel(cfg))
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="‚öôÔ∏è Panel:", reply_markup=panel(cfg))
    elif d == "SET_DELAY":
        pending_action[ADMIN_ID] = "SET_DELAY"
        try: await q.message.edit_text("‚è± G·ª≠i s·ªë gi√¢y auto-delete (vd 0.1).")
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="‚è± G·ª≠i s·ªë gi√¢y auto-delete (vd 0.1).")
    elif d == "SET_COOLDOWN":
        pending_action[ADMIN_ID] = "SET_COOLDOWN"
        try: await q.message.edit_text("üõë G·ª≠i cooldown (gi√¢y), vd 10.")
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="üõë G·ª≠i cooldown (gi√¢y), vd 10.")
    elif d == "SET_TEXT":
        pending_action[ADMIN_ID] = "SET_TEXT"
        try: await q.message.edit_text("üìù G·ª≠i n·ªôi dung ch√†o. Bi·∫øn: {first_name} {last_name} {mention} {tag} {chat_title}")
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="üìù ‚Ä¶")
    elif d == "SET_REPLYTEXT":
        pending_action[ADMIN_ID] = "SET_REPLYTEXT"
        try: await q.message.edit_text("üó®Ô∏è G·ª≠i reply /start (private).")
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="üó®Ô∏è ‚Ä¶")
    elif d == "SET_PHOTO":
        pending_action[ADMIN_ID] = "SET_PHOTO"
        try: await q.message.edit_text("üñº G·ª≠i ·∫£nh ho·∫∑c URL http(s).")
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="üñº ‚Ä¶")
    elif d == "SHOW_CFG":
        txt = (f"<b>enabled</b>: {cfg.get('enabled', True)}\n"
               f"<b>delete_after_seconds</b>: {cfg.get('delete_after_seconds',0.1)}\n"
               f"<b>tag_enabled</b>: {cfg.get('tag_enabled', True)}\n"
               f"<b>cooldown_seconds</b>: {cfg.get('cooldown_seconds',10.0)}\n"
               f"<b>start_reply</b>: <pre>{cfg.get('start_reply','')}</pre>\n"
               f"<b>welcome.text</b>:\n<pre>{cfg.get('welcome',{}).get('text','')}</pre>\n"
               f"<b>welcome.photo_path</b>: {cfg.get('welcome',{}).get('photo_path','') or '(kh√¥ng)'}")
        try: await q.message.edit_text(txt, parse_mode=ParseMode.HTML, reply_markup=panel(cfg))
        except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text=txt, parse_mode=ParseMode.HTML, reply_markup=panel(cfg))

async def on_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID: return
    act = pending_action.get(ADMIN_ID)
    if not act:
        await update.message.reply_text("‚öôÔ∏è Panel:", reply_markup=panel(load_config()))
        return
    cfg = load_config()
    try:
        if act == "SET_DELAY":
            s = float(update.message.text.strip()); assert s>=0
            cfg["delete_after_seconds"]=s; save_config(cfg); await update.message.reply_text(f"‚úÖ Auto-delete: {s}s")
        elif act == "SET_COOLDOWN":
            s = float(update.message.text.strip()); assert s>=0
            cfg["cooldown_seconds"]=s; save_config(cfg); await update.message.reply_text(f"‚úÖ Cooldown: {s}s")
        elif act == "SET_TEXT":
            cfg.setdefault("welcome", {})["text"] = update.message.text.strip(); save_config(cfg); await update.message.reply_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t n·ªôi dung ch√†o.")
        elif act == "SET_REPLYTEXT":
            cfg["start_reply"] = update.message.text.strip(); save_config(cfg); await update.message.reply_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t reply /start.")
        elif act == "SET_PHOTO":
            if update.message.photo:
                f = await update.message.photo[-1].get_file()
                p = os.path.join(APP_DIR, "welcome.jpg"); await f.download_to_drive(p)
                cfg.setdefault("welcome", {})["photo_path"] = p
            else:
                cfg.setdefault("welcome", {})["photo_path"] = update.message.text.strip()
            save_config(cfg); await update.message.reply_text("‚úÖ ƒê√£ c·∫≠p nh·∫≠t ·∫£nh ch√†o.")
    except Exception:
        await update.message.reply_text("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
    finally:
        pending_action.pop(ADMIN_ID, None)
    await context.bot.send_message(chat_id=ADMIN_ID, text="‚öôÔ∏è Panel:", reply_markup=panel(load_config()))

def main_sub():
    cfg = load_config()
    token = (cfg.get("bot_token") or BOT_TOKEN).strip()
    if not token or token == "__BOT_TOKEN__":
        raise SystemExit("‚ùå Ch∆∞a c·∫•u h√¨nh BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("panel", cmd_panel))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.User(user_id=ADMIN_ID) & (filters.TEXT | filters.PHOTO), on_admin_input))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.User(user_id=ADMIN_ID) & filters.TEXT, on_private_non_admin))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, on_new_members))
    print("ü§ñ Sub-bot started.")
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main_sub()
'''

JOIN_PY_TEMPLATE = r'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# bot_delete_join_messages.py
from pyrogram import Client, filters
from pyrogram.types import Message

api_id = 28514063
api_hash = "96f1688ba0ae0f7516af16381c49a5ca"
bot_token = "__BOT_TOKEN__"
ADMIN_ID  = __ADMIN_ID__

app = Client("bot_session", api_id=api_id, api_hash=api_hash, bot_token=bot_token)

def _names(users):
    try:
        return ", ".join([u.first_name or "user" for u in users])
    except Exception:
        return "unknown"

@app.on_message(filters.new_chat_members)
async def delete_join_message(client, message: Message):
    try:
        await message.delete()
        who = _names(message.new_chat_members)
        chat_title = message.chat.title or str(message.chat.id)
        try:
            await app.send_message(ADMIN_ID, f"üóëÔ∏è ƒê√£ xo√° th√¥ng b√°o join c·ªßa <b>{who}</b> t·∫°i nh√≥m <b>{chat_title}</b>.", parse_mode="html", disable_web_page_preview=True)
        except Exception:
            pass
        print(f"[{message.chat.id}] üóëÔ∏è Xo√° join: {who}")
    except Exception as e:
        print(f"[{message.chat.id}] ‚ö†Ô∏è L·ªói khi xo√°: {e}")
        try:
            await app.send_message(ADMIN_ID, f"‚ö†Ô∏è L·ªói xo√° join ·ªü <b>{message.chat.id}</b>: <code>{e}</code>", parse_mode="html")
        except Exception:
            pass

@app.on_message(filters.command("id") & filters.private)
async def show_id(client: Client, message: Message):
    target = message.reply_to_message.from_user if message.reply_to_message and message.reply_to_message.from_user else message.from_user
    uid = target.id
    name = target.first_name or "ng∆∞·ªùi d√πng"
    await message.reply_text(f"üÜî ID c·ªßa {name}: <i>{uid}</i>", parse_mode="html")

print("üöÄ Pyrogram bot ƒëang ch·∫°y 24/24...")
app.run()
'''

# ======================== STATE I/O (MANAGER) ========================
def save_state(st: dict) -> None:
    with open(STATE_FP, "w", encoding="utf-8") as f:
        json.dump(st, f, ensure_ascii=False, indent=2)

def load_state() -> dict:
    if not os.path.exists(STATE_FP):
        save_state(DEFAULT_STATE)
    try:
        with open(STATE_FP, "r", encoding="utf-8") as f:
            st = json.load(f)
    except Exception:
        st = {}
    if not isinstance(st, dict): st = {}
    st.setdefault("sub_admins", {})
    st.setdefault("bots", [])
    st.setdefault("non_admin_reply", DEFAULT_STATE["non_admin_reply"])
    if "sale" not in st or not isinstance(st["sale"], dict):
        st["sale"] = {}
    st["sale"].setdefault("enabled", DEFAULT_STATE["sale"]["enabled"])
    st["sale"].setdefault("text", DEFAULT_STATE["sale"]["text"])
    save_state(st)
    return st

# ======================== TI·ªÜN √çCH ========================
def now_ts() -> int: return int(time.time())
def mask_token(tok: str) -> str: return tok[:4]+"..."+tok[-4:] if len(tok)>8 else "***"
def is_main_admin(uid: int) -> bool: return uid == MAIN_ADMIN_ID
def human_expire(exp: int) -> str:
    if exp <= 0: return "vƒ©nh vi·ªÖn"
    remain = exp - now_ts()
    if remain <= 0: return "ƒë√£ h·∫øt h·∫°n"
    d = remain // 86400; h = (remain % 86400)//3600; m = (remain % 3600)//60
    return f"c√≤n {d}d {h}h {m}m"

def ensure_sub_admin(st: dict, uid: int):
    s = str(uid)
    if s not in st["sub_admins"]:
        st["sub_admins"][s] = {"expires_at": 0, "quota": 1}

def is_sub_admin_active(st: dict, uid: int) -> bool:
    info = st["sub_admins"].get(str(uid))
    if not info: return False
    exp = info.get("expires_at", 0)
    return exp <= 0 or exp > now_ts()

def _module_exists(name: str) -> bool:
    return importlib.util.find_spec(name) is not None

def _pip_exec() -> list:
    return [sys.executable or "python3", "-m", "pip"]

def ensure_global_deps():
    try:
        need = []
        if not _module_exists("pyrogram"): need += ["pyrogram"]
        if not _module_exists("tgcrypto"): need += ["tgcrypto"]
        try:
            import telegram  # noqa
        except Exception:
            need += ["python-telegram-bot==21.6"]
        if need:
            print(f"[DEPS] Installing: {need}")
            subprocess.run(_pip_exec()+["install"]+need, check=False)
    except Exception as e:
        print(f"[DEPS] install error: {e}")

# ======================== SUPERVISOR ========================
supervisors: Dict[tuple, dict] = {}

def _pick_python_exec() -> str:
    venv_py = os.path.join(APP_DIR, ".venv", "bin", "python")
    if os.path.exists(venv_py): return venv_py
    if sys.prefix != sys.base_prefix and sys.executable: return sys.executable
    return sys.executable or "python3"

def _supervise_thread(kind: str, cmd: List[str], cwd: str, key: tuple, stop_evt: threading.Event):
    err_log_path = os.path.join(cwd, f".{kind}_last_stderr.log")
    while not stop_evt.is_set():
        proc = None
        try:
            print(f"[SUP] Launch {kind}: {' '.join(cmd)}  (cwd={cwd})")
            proc = subprocess.Popen(cmd, cwd=cwd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            supervisors[key]["pid"] = proc.pid

            def _drain(stream, name):
                try:
                    with open(err_log_path, "a", encoding="utf-8") as ferr:
                        for line in stream:
                            if not line: break
                            line = line.rstrip("\n")
                            print(f"[{kind}][{name}] {line}")
                            if name == "stderr": ferr.write(line+"\n")
                            if stop_evt.is_set(): break
                except Exception:
                    pass
            threading.Thread(target=_drain, args=(proc.stdout, "stdout"), daemon=True).start()
            threading.Thread(target=_drain, args=(proc.stderr, "stderr"), daemon=True).start()

            while proc.poll() is None and not stop_evt.is_set():
                time.sleep(0.5)

            code = proc.returncode
            print(f"[SUP] {kind} exited with code {code}")
            if stop_evt.is_set():
                try: proc.terminate()
                except Exception: pass
                break
        except Exception as e:
            print(f"[SUP] {kind} failed to start: {e}")

        if not stop_evt.is_set():
            print(f"[SUP] Restarting {kind} in 1s...")
            time.sleep(1.0)

def start_supervisor_for(folder: str):
    ensure_global_deps()
    py = _pick_python_exec()
    welcome_path = os.path.abspath(os.path.join(folder, "welcome_bot_single.py"))
    join_path    = os.path.abspath(os.path.join(folder, "join.py"))

    print(f"[SUP] Starting sub-bot in: {folder}")
    print(f"[SUP] Python: {py}")
    print(f"[SUP] -> welcome_bot_single.py: {welcome_path}")
    print(f"[SUP] -> join.py             : {join_path}")

    k1 = (folder, "welcome")
    if k1 not in supervisors or not supervisors[k1]["thread"].is_alive():
        stop_evt = threading.Event()
        th = threading.Thread(target=_supervise_thread, args=("welcome", [py, "-u", welcome_path], folder, k1, stop_evt), daemon=True)
        supervisors[k1] = {"thread": th, "stop": stop_evt, "pid": None}
        th.start()

    k2 = (folder, "join")
    if k2 not in supervisors or not supervisors[k2]["thread"].is_alive():
        stop_evt = threading.Event()
        th = threading.Thread(target=_supervise_thread, args=("join", [py, "-u", join_path], folder, k2, stop_evt), daemon=True)
        supervisors[k2] = {"thread": th, "stop": stop_evt, "pid": None}
        th.start()

def stop_supervisor_for(folder: str):
    for kind in ("welcome", "join"):
        key = (folder, kind)
        info = supervisors.get(key)
        if not info: continue
        info["stop"].set()
        pid = info.get("pid")
        if pid:
            try: os.kill(pid, signal.SIGTERM)
            except Exception: pass
        try: info["thread"].join(timeout=2.0)
        except Exception: pass
        supervisors.pop(key, None)

def _active_bots_of(st: dict, uid: int) -> List[dict]:
    return [b for b in st.get("bots", []) if b.get("owner_id")==uid]
def _bot_by_id(st: dict, bot_id: str) -> Optional[dict]:
    for b in st.get("bots", []):
        if b.get("id")==bot_id: return b
    return None

# ======================== PANEL MANAGER ========================
def panel_main(st: dict) -> InlineKeyboardMarkup:
    sale = st.get("sale", {"enabled": False, "text": ""})
    rows = [
        [InlineKeyboardButton("‚ûï Th√™m admin ph·ª•", callback_data="ADD_SUB"),
         InlineKeyboardButton("üõ† Set quota", callback_data="SET_QUOTA")],
        [InlineKeyboardButton("üìã Danh s√°ch admin ph·ª•", callback_data="LIST_SUB"),
         InlineKeyboardButton("üìä Th·ªëng k√™", callback_data="STATS")],
        [InlineKeyboardButton("üõí " + ("ƒêang b√°n" if sale.get("enabled") else "T·∫Øt b√°n"), callback_data="SALE_TOGGLE"),
         InlineKeyboardButton("‚úçÔ∏è S·ª≠a n·ªôi dung b√°n", callback_data="SALE_EDIT")],
        [InlineKeyboardButton("üíª /vps", callback_data="SHOW_VPS"),
         InlineKeyboardButton("üìò Huongdan", callback_data="HELP")],
    ]
    return InlineKeyboardMarkup(rows)

def panel_sub(st: dict, uid: int) -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton("ü§ñ T·∫°o bot m·ªõi", callback_data="CREATE_BOT"),
         InlineKeyboardButton("üóë Xo√° bot", callback_data="DELETE_BOT")],
        [InlineKeyboardButton("üìä Th·ªëng k√™", callback_data="STATS_ME")],
        [InlineKeyboardButton("üìò Huongdan", callback_data="HELP")],
    ]
    return InlineKeyboardMarkup(rows)

# ======================== COMMANDS MANAGER ========================
pending_action: Dict[int, str] = {}
pending_payload: Dict[int, Dict] = {}

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    st = load_state()
    if is_main_admin(uid):
        await update.message.reply_text("‚úÖ Ch√†o admin ch√≠nh!", reply_markup=panel_main(st)); return
    if is_sub_admin_active(st, uid):
        await update.message.reply_text("‚úÖ Ch√†o admin ph·ª•!", reply_markup=panel_sub(st, uid)); return
    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üõí Mua key / mua bot", callback_data="BUY")]])
    await update.message.reply_text(st.get("non_admin_reply", DEFAULT_STATE["non_admin_reply"]), reply_markup=kb)

async def cmd_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    st = load_state()
    if is_main_admin(uid):
        await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
    elif is_sub_admin_active(st, uid):
        await update.message.reply_text("‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid))
    else:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üõí Mua key / mua bot", callback_data="BUY")]])
        await update.message.reply_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn. Nh·∫•n d∆∞·ªõi n·∫øu mu·ªën mua.", reply_markup=kb)

async def cmd_vps(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lines = []
    try:
        import psutil
        cpu = psutil.cpu_percent(interval=0.5)
        mem = psutil.virtual_memory()
        total_gb = mem.total / (1024**3)
        used_gb  = (mem.total - mem.available) / (1024**3)
        disk = shutil.disk_usage("/")
        disk_total = disk.total / (1024**3)
        disk_used  = disk.used / (1024**3)
        lines += [f"üñ• CPU: {cpu:.1f}%", f"üß† RAM: {used_gb:.2f}/{total_gb:.2f} GB", f"üíæ Disk: {disk_used:.2f}/{disk_total:.2f} GB"]
    except Exception:
        lines.append("psutil ch∆∞a c√†i ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c th√¥ng s·ªë.")
    await update.message.reply_text("\n".join(lines))

async def cmd_huongdan(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = ("üìò H∆∞·ªõng d·∫´n:\n"
            "- Admin ch√≠nh: /panel ‚Üí Th√™m admin ph·ª• (theo ng√†y), Set quota, Th·ªëng k√™, b·∫≠t/t·∫Øt & ch·ªânh n·ªôi dung b√°n.\n"
            "- Admin ph·ª•: /panel ‚Üí T·∫°o bot m·ªõi ‚Üí d√°n token ‚Üí tool sinh folder & files, t·ª± ch·∫°y 2 ti·∫øn tr√¨nh (welcome + join) & auto-restart.\n"
            "- H·∫øt h·∫°n: d·ª´ng to√†n b·ªô bot; Gia h·∫°n: t·ª± ch·∫°y l·∫°i.\n")
    await update.message.reply_text(text)

async def cmd_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    target = update.message.reply_to_message.from_user if update.message.reply_to_message and update.message.reply_to_message.from_user else update.effective_user
    uid = target.id
    name = getattr(target, "full_name", None) or target.first_name or "ng∆∞·ªùi d√πng"
    await update.message.reply_text(f"üÜî ID c·ªßa {name}: <i>{uid}</i>", parse_mode=ParseMode.HTML)

async def cmd_sale_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.effective_user.id != MAIN_ADMIN_ID: return
    st = load_state(); st.setdefault("sale", {"enabled": False, "text": ""})
    st["sale"]["enabled"] = not st["sale"]["enabled"]; save_state(st)
    await update.message.reply_text("‚úÖ ƒê√£ chuy·ªÉn tr·∫°ng th√°i b√°n.", reply_markup=panel_main(st))

async def cmd_sale_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or update.effective_user.id != MAIN_ADMIN_ID: return
    pending_action[MAIN_ADMIN_ID] = "SALE_EDIT_TEXT"
    await update.message.reply_text('‚úçÔ∏è G·ª≠i n·ªôi dung khi kh√°ch b·∫•m "Mua key / mua bot":')

# ======================== CALLBACKS MANAGER ========================
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    uid = update.effective_user.id
    st = load_state(); st.setdefault("sale", {"enabled": False, "text": ""})
    data = q.data

    if data == "BUY":
        sale = st.get("sale", {"enabled": False, "text": ""})
        txt = sale.get("text") if sale.get("enabled") else "Hi·ªán t√≠nh nƒÉng mua key/bot ƒëang t·∫Øt. Vui l√≤ng li√™n h·ªá admin."
        await q.message.edit_text(txt); return

    if is_main_admin(uid):
        if data == "ADD_SUB":
            pending_action[uid] = "ADD_SUB_ASK_ID"; await q.message.edit_text("üîë Nh·∫≠p user_id admin ph·ª• c·∫ßn th√™m:")
        elif data == "SET_QUOTA":
            pending_action[uid] = "SET_QUOTA_ASK_ID"; await q.message.edit_text("üì¶ Nh·∫≠p user_id admin ph·ª• c·∫ßn set quota:")
        elif data == "LIST_SUB":
            lines = ["üìã Admin ph·ª•:"]
            for sid, info in st["sub_admins"].items():
                lines.append(f"- {sid} | quota={info.get('quota',1)} | {human_expire(info.get('expires_at',0))}")
            if len(lines)==1: lines.append("(tr·ªëng)")
            await q.message.edit_text("\n".join(lines))
        elif data == "STATS":
            await q.message.edit_text(f"üìä T·ªïng sub-admin: {len(st['sub_admins'])}\nü§ñ T·ªïng bot ƒë√£ t·∫°o: {len(st['bots'])}")
        elif data == "SHOW_VPS":
            await cmd_vps(Update(update.update_id, update.effective_message), context)
        elif data == "HELP":
            await cmd_huongdan(Update(update.update_id, update.effective_message), context)
        elif data == "SALE_TOGGLE":
            st["sale"]["enabled"] = not st["sale"]["enabled"]; save_state(st)
            try: await q.message.edit_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
            except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text="‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
        elif data == "SALE_EDIT":
            pending_action[uid] = "SALE_EDIT_TEXT"
            try: await q.message.edit_text('‚úçÔ∏è G·ª≠i n·ªôi dung khi kh√°ch b·∫•m "Mua key / mua bot":')
            except Exception: await context.bot.send_message(chat_id=q.message.chat.id, text='‚úçÔ∏è G·ª≠i n·ªôi dung khi kh√°ch b·∫•m "Mua key / mua bot":')
        else:
            await q.message.edit_text("‚ùì Ch·ªçn trong panel.")
        return

    if is_sub_admin_active(st, uid):
        if data == "CREATE_BOT":
            info = st["sub_admins"].get(str(uid), {"quota":1})
            if len(_active_bots_of(st, uid)) >= info.get("quota",1):
                await q.message.edit_text("‚õî V∆∞·ª£t quota bot. Nh·ªù admin ch√≠nh tƒÉng quota."); return
            pending_action[uid] = "CREATE_BOT_ASK_TOKEN"
            await q.message.edit_text("üîß G·ª≠i token bot ph·ª• c·∫ßn t·∫°o:"); return

        if data == "DELETE_BOT":
            my = _active_bots_of(st, uid)
            if not my: await q.message.edit_text("üö´ B·∫°n ch∆∞a c√≥ bot n√†o ƒë·ªÉ xo√°."); return
            rows = [[InlineKeyboardButton(f"‚ùå Xo√° {b.get('id')}", callback_data=f"DELBOTID:{b.get('id')}")] for b in my]
            rows.append([InlineKeyboardButton("‚¨ÖÔ∏è Quay l·∫°i", callback_data="BACK_SUB")])
            await q.message.edit_text("Ch·ªçn bot ƒë·ªÉ xo√°:", reply_markup=InlineKeyboardMarkup(rows)); return

        if data.startswith("DELBOTID:"):
            bot_id = data.split("DELBOTID:",1)[1]
            b = _bot_by_id(st, bot_id)
            if not b or b.get("owner_id") != uid:
                await q.message.edit_text("‚ùå Kh√¥ng t√¨m th·∫•y bot c·ªßa b·∫°n ƒë·ªÉ xo√°."); return
            rows = [
                [InlineKeyboardButton("‚úÖ X√°c nh·∫≠n xo√°", callback_data=f"CONFIRM_DELID:{bot_id}")],
                [InlineKeyboardButton("‚ùå Hu·ª∑", callback_data="BACK_SUB")]
            ]
            await q.message.edit_text(f"B·∫°n ch·∫Øc ch·∫Øn mu·ªën xo√° bot: <code>{bot_id}</code>", parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(rows)); return

        if data.startswith("CONFIRM_DELID:"):
            bot_id = data.split("CONFIRM_DELID:",1)[1]
            b = _bot_by_id(st, bot_id)
            if not b or b.get("owner_id") != uid:
                await q.message.edit_text("‚ùå Kh√¥ng t√¨m th·∫•y bot c·ªßa b·∫°n."); return
            folder = b.get("folder")
            if folder: stop_supervisor_for(folder)
            try:
                if folder and os.path.isdir(folder): shutil.rmtree(folder, ignore_errors=True)
            except Exception: pass
            st["bots"] = [x for x in st["bots"] if x.get("id") != bot_id]; save_state(st)
            await q.message.edit_text("‚úÖ ƒê√£ xo√° bot v√† d·ªØ li·ªáu li√™n quan.")
            await context.bot.send_message(chat_id=q.message.chat.id, text="‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid)); return

        if data == "BACK_SUB":
            await q.message.edit_text("‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid)); return

        if data == "STATS_ME":
            info = st["sub_admins"].get(str(uid), {}); my = _active_bots_of(st, uid)
            await q.message.edit_text(f"üìä C·ªßa b·∫°n:\n- quota: {info.get('quota',1)}\n- ƒëang c√≥: {len(my)}\n- c√≤n h·∫°n: {human_expire(info.get('expires_at',0))}"); return

        if data == "HELP":
            await cmd_huongdan(Update(update.update_id, update.effective_message), context); return

        await q.message.edit_text("‚ùì Ch·ªçn trong panel."); return

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üõí Mua key / mua bot", callback_data="BUY")]])
    await q.message.edit_text("‚õî B·∫°n kh√¥ng c√≥ quy·ªÅn. Nh·∫•n d∆∞·ªõi n·∫øu mu·ªën mua.", reply_markup=kb)

# ======================== WIZARD TEXT ========================
async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id
    st = load_state(); st.setdefault("sale", {"enabled": False, "text": ""})
    action = pending_action.get(uid)

    if is_main_admin(uid):
        if action == "ADD_SUB_ASK_ID":
            try: sub_id = int(update.message.text.strip())
            except Exception: await update.message.reply_text("‚ùå user_id kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i:"); return
            pending_payload[uid] = {"sub_id": sub_id}
            pending_action[uid] = "ADD_SUB_ASK_DAYS"
            await update.message.reply_text("‚è≥ Nh·∫≠p th·ªùi gian hi·ªáu l·ª±c (NG√ÄY). 0 = vƒ©nh vi·ªÖn:"); return

        if action == "ADD_SUB_ASK_DAYS":
            try:
                days = int(update.message.text.strip())
                sub_id = pending_payload[uid]["sub_id"]
                ensure_sub_admin(st, sub_id)
                exp = 0 if days==0 else now_ts() + days*86400
                st["sub_admins"][str(sub_id)]["expires_at"] = exp; save_state(st)
                pending_action.pop(uid, None); pending_payload.pop(uid, None)
                await update.message.reply_text(f"‚úÖ ƒê√£ th√™m/c·∫≠p nh·∫≠t admin ph·ª• {sub_id} (h·∫øt h·∫°n: {human_expire(exp)}).")
                for b in _active_bots_of(st, sub_id):
                    if os.path.isdir(b["folder"]): start_supervisor_for(b["folder"])
                await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
            except Exception:
                await update.message.reply_text("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
            return

        if action == "SET_QUOTA_ASK_ID":
            try: sub_id = int(update.message.text.strip())
            except Exception: await update.message.reply_text("‚ùå user_id kh√¥ng h·ª£p l·ªá. Nh·∫≠p l·∫°i:"); return
            pending_payload[uid] = {"sub_id": sub_id}
            pending_action[uid] = "SET_QUOTA_ASK_VAL"
            await update.message.reply_text("üì¶ Nh·∫≠p quota t·ªëi ƒëa s·ªë bot (vd 1,2,3‚Ä¶):"); return

        if action == "SET_QUOTA_ASK_VAL":
            try:
                quota = int(update.message.text.strip())
                sub_id = pending_payload[uid]["sub_id"]
                ensure_sub_admin(st, sub_id)
                st["sub_admins"][str(sub_id)]["quota"] = max(0, quota); save_state(st)
                pending_action.pop(uid, None); pending_payload.pop(uid, None)
                await update.message.reply_text(f"‚úÖ ƒê√£ set quota cho {sub_id} = {quota}.")
                await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
            except Exception:
                await update.message.reply_text("‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.")
            return

        if action == "SALE_EDIT_TEXT":
            st["sale"]["text"] = update.message.text or ""; save_state(st)
            pending_action.pop(uid, None)
            await update.message.reply_text("‚úÖ ƒê√£ l∆∞u n·ªôi dung b√°n.")
            await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
            return

        await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
        return

    if is_sub_admin_active(st, uid):
        if action == "CREATE_BOT_ASK_TOKEN":
            token = update.message.text.strip()
            info = st["sub_admins"].get(str(uid), {"quota":1})
            if len(_active_bots_of(st, uid)) >= info.get("quota",1):
                await update.message.reply_text("‚õî V∆∞·ª£t quota bot. Nh·ªù admin ch√≠nh tƒÉng quota.")
                pending_action.pop(uid, None); return

            label = f"{uid}_{int(time.time())}"
            folder = os.path.join(BOTS_DIR, label); os.makedirs(folder, exist_ok=True)

            await create_sub_bot_files(folder, uid, token)

            st = load_state()
            st["bots"].append({"id": label, "owner_id": uid, "folder": folder, "token_masked": mask_token(token), "created_at": now_ts()})
            save_state(st); pending_action.pop(uid, None)

            start_supervisor_for(folder)
            await update.message.reply_text(f"‚úÖ ƒê√£ t·∫°o bot con: <code>{label}</code>\nüìÇ {folder}\n‚ñ∂Ô∏è ƒêang ch·∫°y welcome_bot_single.py & join.py (t·ª± restart khi crash).", parse_mode=ParseMode.HTML)
            await update.message.reply_text("‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid))
            return

        await update.message.reply_text("‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid))
        return

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("üõí Mua key / mua bot", callback_data="BUY")]])
    await update.message.reply_text(st.get("non_admin_reply", DEFAULT_STATE["non_admin_reply"]), reply_markup=kb)

async def on_any_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message: return
    uid = update.effective_user.id; st = load_state()
    if pending_action.get(uid): return
    if is_main_admin(uid):
        await update.message.reply_text("‚öôÔ∏è Panel admin ch√≠nh:", reply_markup=panel_main(st))
    elif is_sub_admin_active(st, uid):
        await update.message.reply_text("‚öôÔ∏è Panel admin ph·ª•:", reply_markup=panel_sub(st, uid))
    else:
        kb = InlineKeyboardMarkup([[InlineKeyboardButton("üõí Mua key / mua bot", callback_data="BUY")]])
        await update.message.reply_text(st.get("non_admin_reply", DEFAULT_STATE["non_admin_reply"]), reply_markup=kb)

# ======================== T·∫†O FILE BOT CON ========================
async def create_sub_bot_files(folder: str, owner_id: int, token: str):
    ensure_global_deps()
    content = (WELCOME_BOT_TEMPLATE.replace("__BOT_TOKEN__", token).replace("__ADMIN_ID__", str(owner_id)))
    with open(os.path.join(folder, "welcome_bot_single.py"), "w", encoding="utf-8") as f: f.write(content)

    cfg = {
        "bot_token": token, "admin_id": owner_id, "enabled": True,
        "delete_after_seconds": 0.1, "tag_enabled": True, "cooldown_seconds": 10.0,
        "dm_notify_enabled": True, "start_reply": "üëã Xin ch√†o!",
        "welcome": {"text": "Xin ch√†o {tag} üëã\nCh√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <b>{chat_title}</b>!", "photo_path": ""}
    }
    with open(os.path.join(folder, "config.json"), "w", encoding="utf-8") as f: json.dump(cfg, f, ensure_ascii=False, indent=2)

    jcontent = (JOIN_PY_TEMPLATE.replace("__BOT_TOKEN__", token).replace("__ADMIN_ID__", str(owner_id)))
    with open(os.path.join(folder, "join.py"), "w", encoding="utf-8") as f: f.write(jcontent)

# ======================== BOOT & ENFORCER ========================
def bootstrap_existing_bots():
    ensure_global_deps()
    st = load_state()
    for b in st.get("bots", []):
        folder = b.get("folder"); owner = b.get("owner_id")
        if not folder or not os.path.isdir(folder): continue
        if is_sub_admin_active(st, owner): start_supervisor_for(folder)
        else: stop_supervisor_for(folder)

def _enforce_loop(stop_evt: threading.Event):
    while not stop_evt.is_set():
        try:
            st = load_state()
            for b in st.get("bots", []):
                folder = b.get("folder"); owner = b.get("owner_id")
                if not folder or not os.path.isdir(folder): continue
                active = is_sub_admin_active(st, owner)
                keyw, keyj = (folder,"welcome"), (folder,"join")
                running = (keyw in supervisors and supervisors[keyw]["thread"].is_alive()) or (keyj in supervisors and supervisors[keyj]["thread"].is_alive())
                if active and not running: start_supervisor_for(folder)
                if (not active) and running: stop_supervisor_for(folder)
        except Exception as e:
            print(f"[ENFORCER] error: {e}")
        for _ in range(30):
            if stop_evt.is_set(): break
            time.sleep(1)

# ======================== MAIN MANAGER ========================
stop_ev = threading.Event()
enforcer_th: Optional[threading.Thread] = None

def main():
    if not BOT_TOKEN or "AA" not in BOT_TOKEN:
        raise SystemExit("‚ùå Vui l√≤ng ƒë·∫∑t BOT_TOKEN cho bot qu·∫£n l√Ω.")

    bootstrap_existing_bots()
    global enforcer_th
    enforcer_th = threading.Thread(target=_enforce_loop, args=(stop_ev,), daemon=True); enforcer_th.start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("panel", cmd_panel))
    app.add_handler(CommandHandler("vps", cmd_vps))
    app.add_handler(CommandHandler("huongdan", cmd_huongdan))
    app.add_handler(CommandHandler("id", cmd_id))
    app.add_handler(CommandHandler("sale_toggle", cmd_sale_toggle))
    app.add_handler(CommandHandler("sale_edit", cmd_sale_edit))

    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.TEXT, on_text))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND, on_any_private))

    print("üß≠ Manager Bot started. Ctrl+C to stop.")
    try:
        app.run_polling(close_loop=False)
    finally:
        stop_ev.set()
        if enforcer_th and enforcer_th.is_alive():
            enforcer_th.join(timeout=2.0)

if __name__ == "__main__":
    main()